
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import argparse
import sounddevice as sd
import numpy  # Make sure NumPy is loaded before it is used in the callback
assert numpy  

from modules import fuzz, compressor, delay, reverb
                     
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def _create_circle(self, x, y, r, **kwargs):
    return self.create_oval(x-r, y-r, x+r, y+r, **kwargs)

Canvas.create_circle = _create_circle

class light_state():
    def __init__(self, state, plugin):
        self.state = state
        self.plugin = plugin

    def add_plugin(self):
        if self.state:
            return self.plugin
        else:
            return 
            
    def get_state(self):
        return self.state

    def set_state(self, new_state):
        self.state = new_state

# Define effects states
fuzz_state = light_state(False, fuzz)
compressor_state = light_state(False, compressor)
chorus_state = light_state(False, delay)
reverb_state = light_state(False, reverb)

# Define our switch function
def click(light_state, item, canvas):

   #Determine it is on or off
   if light_state.get_state():
      canvas.itemconfig(item, fill="gray") # change color
      light_state.set_state(False)

   else:
      canvas.itemconfig(item, fill="red") # change color
      light_state.set_state(True)

def run():

    # Create window
    window = Tk()
    window.title('Pedal Board')
    window.geometry("780x480")
    window.configure(bg = "#FFFFFF")
    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 480,
        width = 780,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )
    canvas.place(x = 0, y = 0)

    # Image Line
    image_line = PhotoImage(
        file=relative_to_assets("line.png"))
    line = canvas.create_image(
        511.0,
        238.0,
        image=image_line
    )

    # Image plug head 
    image_plug_head = PhotoImage(
        file=relative_to_assets("plug_head.png"))
    plug_head = canvas.create_image(
        68.0,
        239.00001525878906,
        image=image_plug_head
    )

    # Image compressor_body
    image_compressor_body = PhotoImage(
        file=relative_to_assets("compressor_body.png"))
    compressor_body = canvas.create_image(
        613.0,
        240.0,
        image=image_compressor_body
    )

    canvas.create_text(
        547.0 + 10,
        147.0,
        anchor="nw",
        text="COMPRESSOR",
        fill="#FFFFFF",
        font=("Anton\Regular 16 bold")
    )

    # compressor_light
    global compressor_state
    compressor_light = canvas.create_circle(613, 240, 8, fill="gray", outline="black", width=2)

    # compressor_button
    image_compressor_button = PhotoImage(
        file=relative_to_assets("compressor_button.png"))
    compressor_button = Button(
        image=image_compressor_button,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: click(compressor_state, compressor_light, canvas),
        relief="flat"
    )
    compressor_button.place(
        x=606.0,
        y=306.0,
        width=15.0,
        height=15.0
    )

    # Image fuzz_body
    image_fuzz_body = PhotoImage(
        file=relative_to_assets("fuzz_body.png"))
    fuzz_body = canvas.create_image(
        467.0,
        240.0,
        image=image_fuzz_body
    )
    canvas.create_text(
        404.0 + 45,
        147.0,
        anchor="nw",
        text="FUZZ",
        fill="#FFFFFF",
        font=("Anton\Regular 16 bold")
    )

    # fuzz_light
    global fuzz_state
    fuzz_light = canvas.create_circle(468, 240, 8, fill="gray", outline="black", width=2)

    # fuzz_button
    image_fuzz_button = PhotoImage(
        file=relative_to_assets("fuzz_button.png"))
    fuzz_button = Button(
        image=image_fuzz_button,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: click(fuzz_state, fuzz_light, canvas),
        relief="flat"
    )
    fuzz_button.place(
        x=460.0,
        y=306.0,
        width=15.0,
        height=15.0
    )

    # Image chorus_bodys
    image_chorus_body = PhotoImage(
        file=relative_to_assets("chorus_body.png"))
    chorus_body = canvas.create_image(
        325.0,
        240.0,
        image=image_chorus_body
    )
    canvas.create_text(
        277.0 + 15,
        147.0,
        anchor="nw",
        text="CHORUS",
        fill="#FFFFFF",
        font=("Anton\Regular 16 bold")
    )

    # chorus_light
    global chorus_state
    chorus_light = canvas.create_circle(325, 240, 8, fill="gray", outline="black", width=2)

    # chorus_button
    image_chorus_button = PhotoImage(
        file=relative_to_assets("chorus_button.png"))

    chorus_button = Button(
        image=image_chorus_button,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: click(chorus_state, chorus_light, canvas),
        relief="flat"
    )
    chorus_button.place(
        x=318.0,
        y=306.0,
        width=15.0,
        height=15.0
    )

    # Image reverb_body
    image_reverb_body = PhotoImage(
        file=relative_to_assets("reverb_body.png"))
    reverb_body = canvas.create_image(
        180.0,
        240.0,
        image=image_reverb_body
    )
    canvas.create_text(
        147.0,
        147.0,
        anchor="nw",
        text="REVERB",
        fill="#FFFFFF",
        font=("Anton\Regular 16 bold")
    )

    # reverb_light
    global reverb_state
    reverb_light = canvas.create_circle(181, 240, 8, fill="grey", outline="black", width=2)

    # reverb_button
    image_reverb_button = PhotoImage(
        file=relative_to_assets("reverb_button.png"))
    reverb_button = Button(
        image=image_reverb_button,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: click(reverb_state, reverb_light, canvas),
        relief="flat"
    )
    reverb_button.place(
        x=173.0,
        y=306.0,
        width=15.0,
        height=15.0
    )

    realtime()
    window.resizable(False, False)
    window.mainloop()

def int_or_str(text):
    """Helper function for argument parsing."""
    try:
        return int(text)
    except ValueError:
        return text

def callback(indata, outdata, frames, time, status):
    if status:
        print(status)

    global compressor_state
    global fuzz_state
    global chorus_state
    global reverb_state

    fs = 44100
    indata = compressor_state.add_plugin()(indata, fs) if callable(compressor_state.add_plugin()) else indata
    indata = fuzz_state.add_plugin()(indata, fs) if callable(fuzz_state.add_plugin()) else indata
    indata = chorus_state.add_plugin()(indata, fs) if callable(chorus_state.add_plugin()) else indata
    indata = reverb_state.add_plugin()(indata, fs) if callable(reverb_state.add_plugin()) else indata

    outdata[:] = indata

def realtime():
    """
    Input to Output Pass-Through
    """

    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument(
        '-l', '--list-devices', action='store_true',
        help='show list of audio devices and exit')
    args, remaining = parser.parse_known_args()
    if args.list_devices:
        print(sd.query_devices())
        parser.exit(0)
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        parents=[parser])
    parser.add_argument(
        '-i', '--input-device', type=int_or_str,
        help='input device (numeric ID or substring)')
    parser.add_argument(
        '-o', '--output-device', type=int_or_str,
        help='output device (numeric ID or substring)')
    parser.add_argument(
        '-c', '--channels', type=int, default=1,
        help='number of channels')
    parser.add_argument('--dtype', help='audio data type')
    parser.add_argument('--samplerate', type=float, help='sampling rate')
    parser.add_argument('--blocksize', type=int, default=1024, help='block size')
    parser.add_argument('--latency', type=float, default=0.000001, help='latency in seconds')
    args = parser.parse_args(remaining)

    # print(sd.Stream.samplerate)
    try:
        with sd.Stream(device=(args.input_device, args.output_device),
                       samplerate=args.samplerate, blocksize=args.blocksize,
                       dtype=args.dtype, latency=args.latency,
                       channels=args.channels, callback=callback):
            print('#' * 80)
            print('press Return to quit')
            print('#' * 80)
            input()
    except KeyboardInterrupt:
        parser.exit('')
    except Exception as e:
        parser.exit(type(e).__name__ + ': ' + str(e))

if __name__ == '__main__':
    run()
